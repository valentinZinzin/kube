#creation des namespaces

apiVersion: v1
kind: Namespace
metadata:
  name: prod
  labels:
    name: prod

---

apiVersion: v1
kind: Namespace
metadata:
  name: preprod
  labels:
    name: preprod

---

apiVersion: v1
kind: Namespace
metadata:
  name: dev
  labels:
    name: dev

---
#Creation des secrets pour chaque namespace.

apiVersion: v1
kind: Secret
metadata:
  name: stripe-secret
  namespace: prod
type: Opaque
data:
  STRIPE_PUBLISHABLE_KEY: cGtfdGVzdF81MVAwbUlOQms1NnRxRVp3Y0VnRXZLanVveEJQdnBLZTB6Mklhc1dDdjBWSFlJNzZjZVVXOWRQR01Xb2xsTk1hRFliMzZ1NlZpYlNzV3c4dGU1UHcxWXVUSjAwZWh5YTBheHY=
  STRIPE_SECRET_KEY: c2tfdGVzdF81MVAwbUlOQms1NnRxRVp3Y3dJUXVVdEt6R21FdGEyeThXbUk4NkZtdUFJbjJhT2hYV3NZcTJLZXRlcWRMTnpDODBYNFR5M005WXdHR3FHNURlZWNqZTdMQzAwU3pmYm8yaVU=

---

apiVersion: v1
kind: Secret
metadata:
  name: stripe-secret
  namespace: preprod
type: Opaque
data:
  STRIPE_PUBLISHABLE_KEY: cGtfdGVzdF81MVAwbUlOQms1NnRxRVp3Y0VnRXZLanVveEJQdnBLZTB6Mklhc1dDdjBWSFlJNzZjZVVXOWRQR01Xb2xsTk1hRFliMzZ1NlZpYlNzV3c4dGU1UHcxWXVUSjAwZWh5YTBheHY=
  STRIPE_SECRET_KEY: c2tfdGVzdF81MVAwbUlOQms1NnRxRVp3Y3dJUXVVdEt6R21FdGEyeThXbUk4NkZtdUFJbjJhT2hYV3NZcTJLZXRlcWRMTnpDODBYNFR5M005WXdHR3FHNURlZWNqZTdMQzAwU3pmYm8yaVU=

---

apiVersion: v1
kind: Secret
metadata:
  name: stripe-secret
  namespace: dev
type: Opaque
data:
  STRIPE_PUBLISHABLE_KEY: cGtfdGVzdF81MVAwbUlOQms1NnRxRVp3Y0VnRXZLanVveEJQdnBLZTB6Mklhc1dDdjBWSFlJNzZjZVVXOWRQR01Xb2xsTk1hRFliMzZ1NlZpYlNzV3c4dGU1UHcxWXVUSjAwZWh5YTBheHY=
  STRIPE_SECRET_KEY: c2tfdGVzdF81MVAwbUlOQms1NnRxRVp3Y3dJUXVVdEt6R21FdGEyeThXbUk4NkZtdUFJbjJhT2hYV3NZcTJLZXRlcWRMTnpDODBYNFR5M005WXdHR3FHNURlZWNqZTdMQzAwU3pmYm8yaVU=

--- #Creation des services

apiVersion: v1
kind: Service
metadata:
  name: flaskapp-deployment
  namespace: prod
  labels:
    app: flask-svc
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
  - port: 5005
    protocol: TCP
    targetPort: 5005

---

apiVersion: v1
kind: Service
metadata:
  name: flaskapp-deployment
  namespace: preprod
  labels:
    app: flask-svc
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
  - port: 5005
    protocol: TCP
    targetPort: 5005

---

apiVersion: v1
kind: Service
metadata:
  name: flaskapp-deployment
  namespace: dev
  labels:
    app: flask-svc
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
  - port: 5005
    protocol: TCP
    targetPort: 5005

#Creation des ingress

#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: mon-ingress
#  namespace: prod
#  annotations:
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#spec:
#  rules:
#  - host: mondomaine.com
#    http:
#      paths:
#      - pathType: Prefix
#        path: /
#        backend:
#          service:
#            name: flaskapp-deployment-prod
#            port:
#              number: 80

#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: mon-ingress
#  namespace: preprod
#  annotations:
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#spec:
#  rules:
#  - host: mondomaine.com
#    http:
#      paths:
#      - pathType: Prefix
#        path: /
#        backend:
#          service:
#            name: flaskapp-deployment-prod
#            port:
#              number: 80

#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: mon-ingress
#  namespace: dev
#  annotations:
#    nginx.ingress.kubernetes.io/ssl-redirect: "false"
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#spec:
#  rules:
#  - host: mondomaine.com
#    http:
#      paths:
#      - pathType: Prefix
#        path: /
#        backend:
#          service:
#            name: flaskapp-deployment-prod
#            port:
#              number: 80

--- #Cr√©ation des configmaps

apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-app-configmap
  namespace: prod
data:
  DEBUG: "True"
  FLASK_APP: "run.py"
  FLASK_DEBUG: "True"
  SERVER_ADDRESS: "http://localhost:5005/"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-app-configmap
  namespace: preprod
data:
  DEBUG: "True"
  FLASK_APP: "run.py"
  FLASK_DEBUG: "True"
  SERVER_ADDRESS: "http://localhost:5005/"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-app-configmap
  namespace: dev
data:
  DEBUG: "True"
  FLASK_APP: "run.py"
  FLASK_DEBUG: "True"
  SERVER_ADDRESS: "http://localhost:5005/"

--- #Creation des deploiements

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaskapp-deployment
  labels:
    app: flaskapp-deployment
  namespace: prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        imagePullPolicy: IfNotPresent
        image: rocketecommerce:beta
        ports:
          - containerPort: 5005
        resources:
          requests:
            memory: 64Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 450m
        envFrom:
        # Injecter toutes les vars d'un secret
        - secretRef:
            name: stripe-secret
        # Injecter toutes les vars de la configMap
        - configMapRef:
            name: flask-app-configmap

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaskapp-deployment
  labels:
    app: flaskapp-deployment
  namespace: preprod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        imagePullPolicy: IfNotPresent
        image: rocketecommerce:beta
        ports:
          - containerPort: 5005
        resources:
          requests:
            memory: 64Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 450m
        envFrom:
        # Injecter toutes les vars d'un secret
        - secretRef:
            name: stripe-secret
        # Injecter toutes les vars de la configMap
        - configMapRef:
            name: flask-app-configmap

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaskapp-deployment
  labels:
    app: flaskapp-deployment
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        imagePullPolicy: IfNotPresent
        image: rocketecommerce:beta
        ports:
          - containerPort: 5005
        resources:
          requests:
            memory: 64Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 450m
        envFrom:
        # Injecter toutes les vars d'un secret
        - secretRef:
            name: stripe-secret
        # Injecter toutes les vars de la configMap
        - configMapRef:
            name: flask-app-configmap

--- #Mise en place de l'auto scaling

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-flaskapp
  namespace: prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flaskapp-deployment
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-flaskapp
  namespace: preprod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flaskapp-deployment
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-flaskapp
  namespace: dev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flaskapp-deployment
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50

